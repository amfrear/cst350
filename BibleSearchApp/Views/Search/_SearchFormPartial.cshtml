@model BibleSearchApp.ViewModels.SearchViewModel

@* 
    -----------------------------------------------------------------------
    BibleSearchApp

    File: _SearchFormPartial.cshtml
    Description: Partial view responsible for rendering the search form used to find Bible verses.
                 Includes dropdowns for Testament, Book, and Chapter selections, 
                 as well as a keyword input field and a submit button.
    Author: Alex Frear
    Created: 2024-04-27
    License: MIT License
    -----------------------------------------------------------------------
*@

<div id="bibleSearchSection" class="search-section">
    <h1 class="highlight">Search for Bible Verses</h1>
    @* 
        Search Form: Submits GET requests to the "SearchByKeyword" action 
        in the "Search" controller with the selected search parameters.
    *@
    <form id="searchForm" method="get" asp-action="SearchByKeyword" asp-controller="Search">

        <!-- Testament Dropdown -->
        @* 
            Dropdown for selecting the Testament ("Old", "New", "All Testaments").
            Populated from the Testaments collection in the ViewModel.
        *@
        <div class="form-group">
            <label for="testamentDropdown">Testament:</label>
            <select name="testament" id="testamentDropdown" class="form-select">
                @foreach (var testament in Model.Testaments)
                {
                    if (testament == Model.KeywordTestament)
                    {
                                <option value="@testament" selected>@testament</option>
                    }
                    else
                    {
                                <option value="@testament">@testament</option>
                    }
                }
            </select>
        </div>

        <!-- Book Dropdown -->
        @* 
            Dropdown for selecting a specific Book.
            Includes an option for "All Books" and populates options from the Books collection in the ViewModel.
        *@
        <div class="form-group">
            <label for="bookDropdown">Book:</label>
            <select name="bookId" id="bookDropdown" class="form-select">
                <option value="">All Books</option>
                @foreach (var book in Model.Books)
                {
                    if (book.Id == Model.KeywordBookId)
                    {
                                <option value="@book.Id" selected>@book.Name</option>
                    }
                    else
                    {
                                <option value="@book.Id">@book.Name</option>
                    }
                }
            </select>
        </div>

        <!-- Chapter Dropdown -->
        @* 
            Dropdown for selecting a specific Chapter.
            Includes an option for "All Chapters" and populates options based on the selected Book's chapter count.
            Utilizes the ChapterCounts dictionary from the ViewModel to determine the number of chapters per book.
        *@
        <div class="form-group">
            <label for="chapterDropdown">Chapter:</label>
            <select name="chapter" id="chapterDropdown" class="form-select">
                <option value="">All Chapters</option>
                @* 
                    Dynamically generate chapter options based on the selected Book's chapter count.
                    Defaults to 150 chapters if no specific book is selected.
                *@
                @for (int i = 1; i <= Model.ChapterCounts.GetValueOrDefault(Model.KeywordBookId ?? 0, 150); i++)
                {
                    if (i == Model.KeywordChapter)
                    {
                                <option value="@i" selected>@i</option>
                    }
                    else
                    {
                                <option value="@i">@i</option>
                    }
                }
            </select>
        </div>

        <!-- Keyword Input -->
        @* 
            Text input for entering a keyword to search within Bible verses.
            Preserves the entered keyword across form submissions by binding to the ViewModel's Keyword property.
        *@
        <div class="form-group">
            <label for="keyword">Keyword:</label>
            <input type="text" name="keyword" id="keyword" class="form-control" placeholder="Enter keyword..." value="@Model.Keyword" />
        </div>

        <!-- Submit Button -->
        @* 
            Button to submit the search form.
            Initiates the search based on the selected parameters and entered keyword.
        *@
        <button type="submit" class="btn btn-primary">Search</button>
    </form>
</div>
